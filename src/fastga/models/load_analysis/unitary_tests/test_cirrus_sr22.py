"""
Test load_analysis module
"""
#  This file is part of FAST : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2020  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest

from ..aerostructural_loads import AerostructuralLoad
from ..structural_loads import StructuralLoads
from ..aerodynamic_loads import AerodynamicLoads
from ..fuselage.compute_bending_moment import ComputeBendingMoment
from ..fuselage.compute_torsion_moment import ComputeTorsionMoment

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs

XML_FILE = "cirrus_sr22.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1426.3, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(97568, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-6004.87, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1426.3, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(246892, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-13190, abs=1)


def test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -659.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -647.9,
            -647.9,
            -647.4,
            -647.0,
            -647.0,
            -646.3,
            -645.5,
            -645.5,
            -636.7,
            -626.4,
            -616.0,
            -605.6,
            -595.2,
            -584.7,
            -574.2,
            -563.7,
            -553.1,
            -542.6,
            -532.1,
            -521.5,
            -511.0,
            -500.5,
            -490.0,
            -479.5,
            -469.1,
            -458.8,
            -448.5,
            -438.2,
            -428.0,
            -417.9,
            -407.8,
            -397.8,
            -387.9,
            -378.1,
            -368.4,
            -358.8,
            -349.3,
            -339.9,
            -330.6,
            -329.5,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -1103.2,
            -1091.4,
            -1091.4,
            -1091.4,
            -1091.4,
            -1091.4,
            -1091.4,
            -1091.4,
            -1084.5,
            -1084.5,
            -1083.7,
            -1082.9,
            -1082.9,
            -1081.7,
            -1080.5,
            -1080.4,
            -1065.7,
            -1048.5,
            -1031.1,
            -1013.7,
            -996.2,
            -978.7,
            -961.1,
            -943.5,
            -925.9,
            -908.2,
            -890.6,
            -872.9,
            -855.3,
            -837.7,
            -820.2,
            -802.7,
            -785.2,
            -767.9,
            -750.6,
            -733.5,
            -716.4,
            -699.4,
            -682.6,
            -665.9,
            -649.3,
            -632.9,
            -616.7,
            -600.6,
            -584.7,
            -569.0,
            -553.4,
            -551.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -770.4,
            -579.9,
            -389.3,
            -376.5,
            -198.8,
            -8.2,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -2956.2,
            -2921.8,
            -2853.5,
            -2785.2,
            -2716.9,
            -2648.5,
            -2580.2,
            -2511.9,
            -2442.6,
            -2442.0,
            -2434.5,
            -2427.0,
            -2426.4,
            -2419.4,
            -2412.0,
            -2411.3,
            -2324.2,
            -2223.0,
            -2123.0,
            -2024.2,
            -1926.8,
            -1830.7,
            -1736.1,
            -1643.1,
            -1551.6,
            -1461.9,
            -1373.8,
            -1287.5,
            -1203.1,
            -1120.5,
            -1039.8,
            -961.1,
            -884.4,
            -809.6,
            -736.9,
            -666.2,
            -597.6,
            -531.0,
            -466.5,
            -404.1,
            -343.7,
            -285.4,
            -229.1,
            -174.8,
            -122.5,
            -72.2,
            -23.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4948.0,
            -4890.6,
            -4776.2,
            -4661.9,
            -4547.5,
            -4433.2,
            -4318.8,
            -4204.5,
            -4088.5,
            -4087.4,
            -4074.8,
            -4062.3,
            -4061.4,
            -4049.7,
            -4037.2,
            -4036.1,
            -3890.3,
            -3720.9,
            -3553.5,
            -3388.2,
            -3225.1,
            -3064.3,
            -2906.0,
            -2750.2,
            -2597.1,
            -2446.9,
            -2299.5,
            -2155.1,
            -2013.7,
            -1875.5,
            -1740.5,
            -1608.7,
            -1480.2,
            -1355.1,
            -1233.4,
            -1115.1,
            -1000.2,
            -888.8,
            -780.9,
            -676.4,
            -575.3,
            -477.6,
            -383.4,
            -292.5,
            -205.0,
            -120.8,
            -39.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -632.1,
            -591.3,
            -509.7,
            -428.2,
            -346.6,
            -265.0,
            -183.4,
            -101.9,
            -18.8,
            -18.1,
            -10.2,
            -4.6,
            -4.3,
            -1.2,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -7571.3,
            -7417.3,
            -7114.8,
            -6819.4,
            -6531.2,
            -6250.1,
            -5976.2,
            -5709.5,
            -5445.4,
            -5442.9,
            -5414.6,
            -5386.5,
            -5384.6,
            -5358.3,
            -5330.3,
            -5327.9,
            -5006.2,
            -4642.1,
            -4292.3,
            -3957.0,
            -3636.5,
            -3330.6,
            -3039.6,
            -2763.3,
            -2501.8,
            -2254.9,
            -2022.6,
            -1804.8,
            -1601.1,
            -1411.5,
            -1235.6,
            -1073.2,
            -924.0,
            -787.6,
            -663.7,
            -552.0,
            -451.9,
            -363.1,
            -285.3,
            -217.9,
            -160.5,
            -112.6,
            -73.9,
            -43.8,
            -21.9,
            -7.7,
            -0.9,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -12672.8,
            -12415.2,
            -11908.8,
            -11414.4,
            -10932.0,
            -10461.5,
            -10003.1,
            -9556.6,
            -9114.5,
            -9110.4,
            -9063.1,
            -9015.9,
            -9012.7,
            -8968.9,
            -8921.9,
            -8917.9,
            -8379.5,
            -7770.0,
            -7184.5,
            -6623.3,
            -6086.7,
            -5574.8,
            -5087.7,
            -4625.2,
            -4187.5,
            -3774.3,
            -3385.5,
            -3020.8,
            -2680.0,
            -2362.6,
            -2068.2,
            -1796.4,
            -1546.6,
            -1318.3,
            -1111.0,
            -923.9,
            -756.4,
            -607.8,
            -477.5,
            -364.7,
            -268.6,
            -188.5,
            -123.6,
            -73.3,
            -36.6,
            -12.9,
            -1.4,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def _test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.28)
    ivc.add_output("data:loads:max_shear:mass", 1426.3, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.28)
    ivc.add_output("data:loads:max_rbm:mass", 1426.3, units="kg")
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            14085.6,
            13935.7,
            13936.8,
            13934.5,
            13901.7,
            13898.9,
            13887.0,
            13838.0,
            13769.3,
            13769.1,
            13765.6,
            13762.2,
            13762.0,
            13755.2,
            13747.9,
            13747.2,
            13660.2,
            13591.1,
            13477.0,
            13327.9,
            13153.7,
            12990.0,
            12830.3,
            12663.4,
            12491.7,
            12299.9,
            12085.6,
            11886.0,
            11645.6,
            11419.1,
            11197.3,
            10980.4,
            10711.3,
            10475.8,
            10229.3,
            9975.2,
            9687.5,
            9447.7,
            9169.0,
            8888.8,
            8558.5,
            8194.5,
            7728.1,
            7222.4,
            6520.7,
            5584.2,
            4399.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1


def test_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(ComputeBendingMoment()), __file__, XML_FILE)
    ivc.add_output("data:loads:fuselage:inertia", 0.000499, units="m**4")
    ivc.add_output("data:weight:airframe:fuselage:total_additional_mass", 116.692, units="kg")
    ivc.add_output("data:loads:fuselage:sigmaMh", 1.8e08, units="N/m**2")
    ivc.add_output("data:weight:fuselage:tail_cone_mass", 12.656, units="kg")
    ivc.add_output("data:flight_domain:diving_speed", 109.139, units="m/s")
    ivc.add_output("data:weight:fuselage:shell_mass", 48.721, units="kg")
    ivc.add_output("data:weight:fuselage:nose_mass", 9.305, units="kg")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(ComputeBendingMoment(), ivc)
    horizontal_bending_vector = problem.get_val(
        "data:loads:fuselage:horizontal_bending_vector", units="N*m"
    )
    horizontal_bending_vector_result = np.array(
        [
            0,
            727.9409885807662,
            1458.0902025929836,
            2190.4476420366523,
            2925.0133069117724,
            3661.787197218344,
            4400.769312956366,
            5141.95965412584,
            5885.358220726765,
            6630.965012759141,
            7378.780030222969,
            8128.8032731182475,
            8881.034741444975,
            9635.474435203158,
            10392.12235439279,
            11150.978499013872,
            11912.042869066408,
            12675.315464550395,
            13440.796285465833,
            14208.48533181272,
            14978.38260359106,
            15750.488100800852,
            16524.801823442096,
            17301.323771514788,
            18080.053945018928,
            19032.608192967193,
            20030.869202048318,
            21068.04141216705,
            22144.124823323396,
            23259.11943551735,
            24413.025248748912,
            25605.842263018094,
            26837.57047832487,
            28108.209894669257,
            29417.760512051264,
            30766.22233047087,
            32153.5953499281,
            33579.87957042292,
            35045.074991955364,
            36549.18161452541,
            38092.19943813307,
            39674.128462778346,
            41294.96868846123,
            42954.72011518171,
            44653.382742939815,
            44653.382742939815,
            43324.415106645705,
            42027.31555967387,
            40762.084102024324,
            39528.72073369707,
            38327.22545469211,
            37157.59826500942,
            36019.83916464903,
            34913.948153610916,
            33839.92523189509,
            32797.770399501554,
            31787.483656430304,
            30809.06500268134,
            29862.514438254664,
            28947.83196315027,
            28065.017577368166,
            27214.07128090835,
            26394.993073770816,
            25607.782955955576,
            24852.440927462616,
            24128.895571363904,
            23419.22217220614,
            22709.548773048376,
            21999.875373890616,
            21290.201974732852,
            20580.5285755751,
            19870.85517641734,
            19161.181777259575,
            18451.508378101815,
            17741.83497894405,
            17032.161579786287,
            16322.488180628527,
            15612.814781470763,
            14903.141382313,
            14193.467983155238,
            13483.794583997476,
            12774.121184839714,
            12064.447785681952,
            11354.7743865242,
            10645.100987366435,
            9935.427588208673,
            9225.754189050911,
            8516.080789893149,
            7806.407390735387,
            7096.733991577624,
            6387.060592419862,
            5677.3871932621,
            4967.713794104337,
            4258.040394946574,
            3548.366995788812,
            2838.69359663105,
            2129.020197473287,
            1419.346798315525,
            709.6733991577624,
            0,
        ]
    )

    vertical_bending_vector = problem.get_val(
        "data:loads:fuselage:vertical_bending_vector", units="N*m"
    )
    vertical_bending_vector_result = np.array(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            14208.174497997668,
            13945.060155442156,
            13681.945812886643,
            13418.83147033113,
            13155.717127775619,
            12892.602785220108,
            12629.488442664595,
            12366.374100109082,
            12103.25975755357,
            11840.145414998056,
            11577.031072442545,
            11313.916729887032,
            11050.80238733152,
            10787.688044776007,
            10524.573702220494,
            10261.459359664981,
            9998.34501710947,
            9735.230674553957,
            9472.116331998444,
            9209.001989442932,
            8945.887646887419,
            8682.773304331908,
            8419.658961776395,
            8156.544619220882,
            7893.430276665369,
            7630.31593410986,
            7367.201591554348,
            7104.087248998835,
            6840.972906443322,
            6577.85856388781,
            6314.7442213322975,
            6051.629878776785,
            5788.515536221273,
            5525.40119366576,
            5262.286851110247,
            4999.172508554735,
            4736.058165999222,
            4472.943823443709,
            4209.829480888201,
            3946.715138332688,
            3683.6007957771753,
            3420.486453221663,
            3157.3721106661505,
            2894.257768110638,
            2631.1434255551253,
            2368.029082999613,
            2104.9147404441005,
            1841.8003978885877,
            1578.6860553330753,
            1315.5717127775627,
            1052.4573702220503,
            789.3430276665376,
            526.2286851110251,
            263.11434255551256,
            0,
        ]
    )

    horizontal_bending_inertia = problem.get_val(
        "data:loads:fuselage:horizontal_bending_inertia", units="m**4"
    )
    horizontal_bending_inertia_result = np.array(
        [
            0,
            0.000002572058159652041,
            0.000005151918715828543,
            0.000007739581668529506,
            0.00001033504701775493,
            0.000012938314763504817,
            0.00001554938490577916,
            0.00001816825744457797,
            0.00002079493237990124,
            0.00002342940971174897,
            0.00002607168944012116,
            0.000028721771565017814,
            0.00003137965608643892,
            0.000034045343004384495,
            0.000036718832318854534,
            0.00003940012402984902,
            0.00004208921813736799,
            0.0000447861146414114,
            0.00004749081354197928,
            0.00005020331483907162,
            0.00005292361853268843,
            0.00005565172462282968,
            0.000058387633109495414,
            0.0000611313439926856,
            0.00006388285727240023,
            0.00006724854894848409,
            0.0000707757378472374,
            0.00007444041298965692,
            0.00007824257437574269,
            0.00008218222200549466,
            0.00008625935587891285,
            0.00009047397599599728,
            0.00009482608235674789,
            0.00009931567496116473,
            0.00010394275380924781,
            0.0001087073189009971,
            0.00011360937023641264,
            0.00011864890781549435,
            0.0001238259316382423,
            0.0001291404417046565,
            0.0001345924380147369,
            0.00014018192056848352,
            0.00014590888936589637,
            0.00015177334440697542,
            0.00015777528569172071,
            0.00015777528569172071,
            0.0001530796000434815,
            0.00014849651497751438,
            0.0001440260304938193,
            0.00013966814659239634,
            0.00013542286327324548,
            0.00013129018053636664,
            0.00012727009838175993,
            0.00012336261680942527,
            0.00011956773581936268,
            0.00011588545541157219,
            0.00011231577558605375,
            0.00010885869634280742,
            0.00010551421768183316,
            0.00010228233960313098,
            0.00009916306210670088,
            0.00009615638519254284,
            0.0000932623088606569,
            0.00009048083311104306,
            0.00008781195794370125,
            0.00008525543101881914,
            0.00008274791834179505,
            0.00008024040566477094,
            0.00007773289298774687,
            0.00007522538031072276,
            0.0000727178676336987,
            0.00007021035495667462,
            0.00006770284227965051,
            0.00006519532960262643,
            0.00006268781692560232,
            0.00006018030424857823,
            0.00005767279157155414,
            0.00005516527889453004,
            0.00005265776621750594,
            0.000050150253540481855,
            0.000047642740863457756,
            0.00004513522818643367,
            0.00004262771550940957,
            0.00004012020283238551,
            0.000037612690155361414,
            0.000035105177478337314,
            0.00003259766480131322,
            0.00003009015212428913,
            0.000027582639447265037,
            0.00002507512677024094,
            0.00002256761409321685,
            0.000020060101416192756,
            0.000017552588739168657,
            0.000015045076062144565,
            0.00001253756338512047,
            0.000010030050708096378,
            0.000007522538031072282,
            0.000005015025354048189,
            0.0000025075126770240945,
            0,
        ]
    )

    vertical_bending_inertia = problem.get_val(
        "data:loads:fuselage:vertical_bending_inertia", units="m**4"
    )
    vertical_bending_inertia_result = np.array(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.00005020221655959177,
            0.00004927254588256229,
            0.00004834287520553281,
            0.00004741320452850333,
            0.00004648353385147386,
            0.00004555386317444439,
            0.00004462419249741491,
            0.00004369452182038544,
            0.000042764851143355956,
            0.000041835180466326475,
            0.000040905509789297,
            0.00003997583911226752,
            0.00003904616843523804,
            0.000038116497758208565,
            0.000037186827081179084,
            0.0000362571564041496,
            0.000035327485727120135,
            0.000034397815050090654,
            0.00003346814437306117,
            0.0000325384736960317,
            0.00003160880301900222,
            0.00003067913234197275,
            0.000029749461664943266,
            0.00002881979098791379,
            0.00002789012031088431,
            0.00002696044963385484,
            0.000026030778956825366,
            0.000025101108279795892,
            0.00002417143760276641,
            0.000023241766925736937,
            0.000022312096248707456,
            0.000021382425571677978,
            0.0000204527548946485,
            0.00001952308421761902,
            0.000018593413540589542,
            0.000017663742863560068,
            0.000016734072186530587,
            0.00001580440150950111,
            0.000014874730832471647,
            0.000013945060155442169,
            0.000013015389478412688,
            0.00001208571880138321,
            0.000011156048124353733,
            0.000010226377447324257,
            0.000009296706770294778,
            0.000008367036093265302,
            0.000007437365416235823,
            0.000006507694739206344,
            0.0000055780240621768664,
            0.000004648353385147389,
            0.0000037186827081179117,
            0.0000027890120310884332,
            0.0000018593413540589558,
            9.296706770294779e-7,
            0,
        ]
    )

    assert np.max(np.abs(horizontal_bending_vector - horizontal_bending_vector_result)) <= 1e-1
    assert np.max(np.abs(vertical_bending_vector - vertical_bending_vector_result)) <= 1e-1
    assert np.max(np.abs(horizontal_bending_inertia - horizontal_bending_inertia_result)) <= 1e-1
    assert np.max(np.abs(vertical_bending_inertia - vertical_bending_inertia_result)) <= 1e-1
    x_h_bend = problem.get_val("data:loads:fuselage:x_h_bend", units="m")
    assert x_h_bend == pytest.approx(2.988, abs=1e-2)
    additional_mass_horizontal = problem.get_val(
        "data:loads:fuselage:additional_mass:horizontal", units="kg"
    )
    assert additional_mass_horizontal == pytest.approx(0.0, abs=1e-2)
    additional_mass_vertical = problem.get_val(
        "data:loads:fuselage:additional_mass:vertical", units="kg"
    )
    assert additional_mass_vertical == pytest.approx(0.0, abs=1e-2)
    fuselage_mass = problem.get_val("data:loads:fuselage:airframe_mass", units="kg")
    assert fuselage_mass == pytest.approx(165.41, abs=1e-2)


def test_torsion_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(ComputeTorsionMoment()), __file__, XML_FILE)
    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(ComputeTorsionMoment(), ivc)
    torsion_moment = problem.get_val("data:loads:fuselage:torsion_moment", units="N*m")
    assert torsion_moment == pytest.approx(3862.8, abs=1e-1)
