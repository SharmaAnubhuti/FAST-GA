"""
Test load_analysis module
"""
#  This file is part of FAST : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2020  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest


from ..aerostructural_loads import AerostructuralLoad
from ..structural_loads import StructuralLoads
from ..aerodynamic_loads import AerodynamicLoads
from ..fuselage.compute_bending_moment import ComputeBendingMoment
from ..fuselage.compute_torsion_moment import ComputeTorsionMoment

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs


XML_FILE = "beechcraft_76.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1747.3, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(147986.98, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-21398.3, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1568.4, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(392405, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-36064, abs=1)


def _test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    load_factor_shear = 4.0
    ivc.add_output("data:loads:max_shear:load_factor", load_factor_shear)
    load_factor_rbm = 4.0
    ivc.add_output("data:loads:max_rbm:load_factor", load_factor_rbm)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -24551.9,
            -24551.9,
            -24551.9,
            -24551.9,
            -24551.9,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -196.5,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -491.3,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.6,
            -982.7,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def _test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8055.3,
            -7770.3,
            -7485.4,
            -7200.4,
            -6915.5,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6830.4,
            -5141.0,
            -3451.6,
            -2708.3,
            -1762.2,
            -72.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -3438.9,
            -3406.0,
            -3340.1,
            -3274.3,
            -3208.4,
            -3142.5,
            -3076.6,
            -3010.8,
            -2984.3,
            -2983.7,
            -2976.9,
            -2970.0,
            -2963.1,
            -2956.2,
            -2955.6,
            -2931.2,
            -2837.5,
            -2743.4,
            -2648.8,
            -2553.7,
            -2458.3,
            -2362.6,
            -2284.0,
            -2283.4,
            -2276.6,
            -2269.7,
            -2266.7,
            -2262.8,
            -2255.9,
            -2255.3,
            -2170.5,
            -2074.3,
            -1978.0,
            -1881.6,
            -1785.4,
            -1689.2,
            -1593.3,
            -1497.5,
            -1402.1,
            -1307.0,
            -1212.3,
            -1118.1,
            -1024.4,
            -931.2,
            -838.7,
            -746.9,
            -655.8,
            -565.5,
            -476.0,
            -387.3,
            -299.6,
            -212.8,
            -126.9,
            -42.1,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4686.8,
            -4675.9,
            -4654.0,
            -4632.2,
            -4610.3,
            -4588.5,
            -4566.6,
            -4544.8,
            -4536.0,
            -4535.8,
            -4533.5,
            -4526.7,
            -4515.3,
            -4503.9,
            -4502.9,
            -4462.3,
            -4307.1,
            -4151.0,
            -3994.1,
            -3836.5,
            -3717.8,
            -3638.5,
            -3573.4,
            -3572.9,
            -3567.2,
            -3561.5,
            -3559.0,
            -3555.8,
            -3550.1,
            -3549.6,
            -3479.3,
            -3399.5,
            -3279.7,
            -3120.0,
            -2960.4,
            -2800.9,
            -2641.8,
            -2483.0,
            -2324.8,
            -2167.1,
            -2010.1,
            -1853.9,
            -1698.5,
            -1544.1,
            -1390.7,
            -1238.4,
            -1087.4,
            -937.6,
            -789.2,
            -642.2,
            -496.7,
            -352.8,
            -210.5,
            -69.9,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def _test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -14541.1,
            -14092.7,
            -13196.0,
            -12299.4,
            -11402.7,
            -10506.0,
            -9609.4,
            -8712.7,
            -8352.6,
            -8344.5,
            -8252.7,
            -8164.2,
            -8078.9,
            -7997.0,
            -7990.1,
            -7705.2,
            -6614.6,
            -5517.8,
            -4415.5,
            -3308.4,
            -2197.1,
            -1082.3,
            -167.1,
            -160.2,
            -90.8,
            -40.9,
            -25.2,
            -10.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -9977.7,
            -9787.5,
            -9412.6,
            -9045.1,
            -8684.8,
            -8331.8,
            -7986.2,
            -7647.9,
            -7514.1,
            -7511.1,
            -7476.6,
            -7442.1,
            -7407.6,
            -7373.3,
            -7370.3,
            -7248.8,
            -6793.1,
            -6349.8,
            -5919.3,
            -5502.1,
            -5098.7,
            -4709.4,
            -4401.4,
            -4399.1,
            -4372.7,
            -4346.3,
            -4334.7,
            -4320.0,
            -4293.8,
            -4291.5,
            -3974.9,
            -3630.1,
            -3300.8,
            -2987.2,
            -2689.4,
            -2407.5,
            -2141.7,
            -1892.0,
            -1658.5,
            -1441.2,
            -1239.9,
            -1054.7,
            -885.3,
            -731.7,
            -593.5,
            -470.7,
            -362.8,
            -269.8,
            -191.1,
            -126.6,
            -75.7,
            -38.2,
            -13.6,
            -1.5,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -15514.4,
            -15254.2,
            -14735.7,
            -14219.7,
            -13706.0,
            -13194.8,
            -12686.0,
            -12179.7,
            -11977.0,
            -11972.5,
            -11919.8,
            -11867.2,
            -11814.8,
            -11762.4,
            -11757.9,
            -11572.9,
            -10880.2,
            -10208.3,
            -9558.0,
            -8930.1,
            -8325.2,
            -7731.2,
            -7253.2,
            -7249.6,
            -7208.2,
            -7166.8,
            -7148.6,
            -7125.5,
            -7084.3,
            -7080.7,
            -6577.8,
            -6019.1,
            -5473.2,
            -4953.1,
            -4459.3,
            -3991.9,
            -3551.2,
            -3137.2,
            -2750.1,
            -2389.7,
            -2055.9,
            -1748.8,
            -1468.0,
            -1213.2,
            -984.1,
            -780.4,
            -601.6,
            -447.3,
            -316.9,
            -209.9,
            -125.5,
            -63.3,
            -22.5,
            -2.5,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def _test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_shear:mass", 1747.0, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:mass", 1568.0, units="kg")
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            6257.1,
            6257.1,
            6256.9,
            6258.7,
            6256.0,
            6250.9,
            6248.4,
            6837.1,
            6968.4,
            6971.4,
            7005.5,
            7041.7,
            7094.2,
            7146.7,
            7151.2,
            7337.9,
            8279.8,
            11151.1,
            18189.2,
            33070.4,
            32166.4,
            31129.4,
            30287.1,
            30280.7,
            30207.0,
            30133.3,
            30100.8,
            30059.1,
            29984.6,
            29978.2,
            29059.8,
            27990.8,
            26938.2,
            25884.6,
            24835.9,
            23773.9,
            22716.8,
            21654.0,
            20592.6,
            19519.5,
            18456.4,
            17379.7,
            16312.5,
            15240.5,
            14170.7,
            13083.4,
            11998.2,
            10898.7,
            9783.9,
            8601.8,
            7382.8,
            6067.2,
            4595.8,
            2814.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1


def test_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(ComputeBendingMoment()), __file__, XML_FILE)
    ivc.add_output("data:loads:fuselage:inertia", 0.000475, units="m**4")
    ivc.add_output("data:weight:airframe:fuselage:total_additional_mass", 98.359, units="kg")
    ivc.add_output("data:loads:fuselage:sigmaMh", 1.8e08, units="N/m**2")
    ivc.add_output("data:weight:fuselage:tail_cone_mass", 18.103, units="kg")
    ivc.add_output("data:flight_domain:diving_speed", 109.139, units="m/s")
    ivc.add_output("data:weight:fuselage:shell_mass", 59.48, units="kg")
    ivc.add_output("data:weight:fuselage:nose_mass", 12.572, units="kg")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(ComputeBendingMoment(), ivc)
    horizontal_bending_vector = problem.get_val(
        "data:loads:fuselage:horizontal_bending_vector", units="N*m"
    )
    horizontal_bending_vector_result = np.array(
        [
            0,
            978.5060595774563,
            1960.2571844543104,
            2945.2533746305626,
            3933.4946301062123,
            4924.9809508812605,
            5919.712336955705,
            6917.688788329548,
            7918.91030500279,
            8923.376886975428,
            9931.088534247467,
            10942.045246818898,
            11956.247024689732,
            12973.693867859962,
            13994.38577632959,
            15018.322750098614,
            16045.50478916704,
            17075.931893534864,
            18109.604063202078,
            19146.521298168696,
            20186.683598434713,
            21230.090964000123,
            22276.74339486493,
            23326.640891029143,
            24368.921526443934,
            25464.957509467626,
            26626.393837431715,
            27853.23051033621,
            29145.4675281811,
            30503.1048909664,
            31926.142598692095,
            33414.5806513582,
            34968.4190489647,
            36587.65779151159,
            38272.29687899891,
            40022.33631142661,
            41837.776088794715,
            43718.61621110322,
            45664.85667835214,
            47676.49749054144,
            49753.53864767117,
            51895.98014974128,
            54103.82199675179,
            56377.06418870271,
            58715.70672559402,
            61119.74960742575,
            63589.192834197864,
            63589.192834197864,
            61961.00826704621,
            60368.514595028224,
            58811.71181814391,
            57290.59993639324,
            55805.17894977625,
            54355.44885829292,
            52941.409661943275,
            51563.061360727275,
            50220.40395464494,
            48913.43744369628,
            47642.16182788128,
            46406.57710719995,
            45206.68328165228,
            44040.25743351529,
            42881.30329052805,
            41722.3491475408,
            40563.39500455355,
            39404.44086156632,
            38245.48671857907,
            37086.532575591824,
            35927.578432604576,
            34768.62428961733,
            33609.670146630095,
            32450.716003642847,
            31291.7618606556,
            30132.807717668366,
            28973.853574681118,
            27814.89943169387,
            26655.94528870662,
            25496.991145719374,
            24338.037002732137,
            23179.08285974489,
            22020.128716757645,
            20861.174573770408,
            19702.22043078316,
            18543.266287795912,
            17384.312144808664,
            16225.358001821416,
            15066.403858834183,
            13907.449715846935,
            12748.495572859687,
            11589.541429872452,
            10430.587286885204,
            9271.633143897956,
            8112.679000910708,
            6953.724857923461,
            5794.770714936226,
            4635.816571948978,
            3476.8624289617305,
            2317.908285974496,
            1158.954142987248,
            0,
        ]
    )

    vertical_bending_vector = problem.get_val(
        "data:loads:fuselage:vertical_bending_vector", units="N*m"
    )
    vertical_bending_vector_result = np.array(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            20229.49376440301,
            19840.46503816449,
            19451.43631192597,
            19062.40758568745,
            18673.37885944893,
            18284.35013321041,
            17895.32140697189,
            17506.292680733375,
            17117.263954494854,
            16728.235228256333,
            16339.206502017816,
            15950.177775779297,
            15561.149049540776,
            15172.120323302255,
            14783.091597063734,
            14394.062870825219,
            14005.034144586698,
            13616.005418348177,
            13226.976692109662,
            12837.94796587114,
            12448.919239632622,
            12059.8905133941,
            11670.86178715558,
            11281.833060917064,
            10892.804334678543,
            10503.775608440023,
            10114.746882201507,
            9725.718155962986,
            9336.689429724465,
            8947.660703485944,
            8558.631977247425,
            8169.603251008908,
            7780.574524770388,
            7391.545798531867,
            7002.517072293352,
            6613.488346054831,
            6224.459619816311,
            5835.43089357779,
            5446.402167339269,
            5057.373441100754,
            4668.344714862233,
            4279.315988623713,
            3890.2872623851963,
            3501.258536146676,
            3112.2298099081554,
            2723.2010836696345,
            2334.172357431114,
            1945.1436311925981,
            1556.1149049540777,
            1167.086178715557,
            778.057452477041,
            389.0287262385205,
            0,
        ]
    )

    horizontal_bending_inertia = problem.get_val(
        "data:loads:fuselage:horizontal_bending_inertia", units="m**4"
    )
    horizontal_bending_inertia_result = np.array(
        [
            0,
            0.000003255707106005214,
            0.000006522211265387146,
            0.000009799512478145799,
            0.00001308761074428117,
            0.00001638650606379326,
            0.000019696198436682063,
            0.00002301668786294759,
            0.000026347974342589836,
            0.000029690057875608798,
            0.000033042938462004484,
            0.00003640661610177688,
            0.000039781090794926005,
            0.000043166362541451835,
            0.0000465624313413544,
            0.00004996929719463366,
            0.00005338696010128966,
            0.00005681542006132239,
            0.0000602546770747318,
            0.00006370473114151796,
            0.00006716558226168083,
            0.0000706372304352204,
            0.0000741196756621367,
            0.00007761291794242974,
            0.00008108081723437372,
            0.00008472757251344533,
            0.00008859192927354363,
            0.00009267388751466865,
            0.00009697344723682034,
            0.00010149060843999875,
            0.00010622537112420386,
            0.0001111777352894357,
            0.00011634770093569421,
            0.00012173526806297939,
            0.00012734043667129137,
            0.00013316320676062996,
            0.0001392035783309953,
            0.0001454615513823873,
            0.00015193712591480608,
            0.0001586303019282515,
            0.0001655410794227237,
            0.0001726694583982225,
            0.00018001543885474804,
            0.00018757902079230028,
            0.0001953602042108792,
            0.0002033589891104849,
            0.0002115753754911172,
            0.0002115753754911172,
            0.00020615804361741094,
            0.00020085946328312444,
            0.0001956796344882577,
            0.00019061855723281063,
            0.00018567623151678333,
            0.0001808526573401757,
            0.00017614783470298794,
            0.0001715617636052198,
            0.00016709444404687144,
            0.00016274587602794281,
            0.00015851605954843388,
            0.0001544049946083447,
            0.00015041268120767528,
            0.00014653172320517948,
            0.00014267562522609584,
            0.00013881952724701215,
            0.00013496342926792846,
            0.00013110733128884482,
            0.00012725123330976115,
            0.00012339513533067746,
            0.00011953903735159378,
            0.00011568293937251008,
            0.00011182684139342647,
            0.00010797074341434278,
            0.0001041146454352591,
            0.00010025854745617546,
            0.00009640244947709178,
            0.00009254635149800809,
            0.00008869025351892442,
            0.00008483415553984074,
            0.00008097805756075709,
            0.00007712195958167341,
            0.00007326586160258974,
            0.00006940976362350609,
            0.00006555366564442241,
            0.00006169756766533873,
            0.00005784146968625504,
            0.00005398537170717136,
            0.00005012927372808773,
            0.00004627317574900404,
            0.00004241707776992037,
            0.00003856097979083673,
            0.000034704881811753044,
            0.000030848783832669364,
            0.00002699268585358568,
            0.000023136587874502,
            0.000019280489895418365,
            0.000015424391916334682,
            0.000011568293937251,
            0.000007712195958167363,
            0.0000038560979790836816,
            0,
        ]
    )

    vertical_bending_inertia = problem.get_val(
        "data:loads:fuselage:vertical_bending_inertia", units="m**4"
    )
    vertical_bending_inertia_result = np.array(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.00006730802119722757,
            0.00006601363617420397,
            0.00006471925115118035,
            0.00006342486612815675,
            0.00006213048110513314,
            0.000060836096082109525,
            0.00005954171105908591,
            0.00005824732603606232,
            0.00005695294101303871,
            0.0000556585559900151,
            0.000054364170966991496,
            0.00005306978594396789,
            0.00005177540092094428,
            0.00005048101589792067,
            0.000049186630874897055,
            0.00004789224585187347,
            0.000046597860828849854,
            0.000045303475805826233,
            0.00004400909078280265,
            0.00004271470575977903,
            0.000041420320736755426,
            0.00004012593571373181,
            0.000038831550690708205,
            0.00003753716566768461,
            0.000036242780644661,
            0.00003494839562163739,
            0.00003365401059861379,
            0.000032359625575590176,
            0.00003106524055256657,
            0.000029770855529542956,
            0.00002847647050651935,
            0.000027182085483495748,
            0.00002588770046047214,
            0.000024593315437448527,
            0.000023298930414424937,
            0.000022004545391401323,
            0.000020710160368377713,
            0.000019415775345354102,
            0.00001812139032233049,
            0.000016827005299306895,
            0.000015532620276283285,
            0.000014238235253259674,
            0.000012943850230236077,
            0.000011649465207212469,
            0.000010355080184188856,
            0.000009060695161165244,
            0.000007766310138141634,
            0.000006471925115118039,
            0.000005177540092094428,
            0.000003883155069070817,
            0.0000025887700460472213,
            0.0000012943850230236107,
            0,
        ]
    )

    assert np.max(np.abs(horizontal_bending_vector - horizontal_bending_vector_result)) <= 1e-1
    assert np.max(np.abs(vertical_bending_vector - vertical_bending_vector_result)) <= 1e-1
    assert np.max(np.abs(horizontal_bending_inertia - horizontal_bending_inertia_result)) <= 1e-1
    assert np.max(np.abs(vertical_bending_inertia - vertical_bending_inertia_result)) <= 1e-1
    x_h_bend = problem.get_val("data:loads:fuselage:x_h_bend", units="m")
    assert x_h_bend == pytest.approx(3.704, abs=1e-2)
    additional_mass_horizontal = problem.get_val(
        "data:loads:fuselage:additional_mass:horizontal", units="kg"
    )
    assert additional_mass_horizontal == pytest.approx(0.0, abs=1e-2)
    additional_mass_vertical = problem.get_val(
        "data:loads:fuselage:additional_mass:vertical", units="kg"
    )
    assert additional_mass_vertical == pytest.approx(0.0, abs=1e-2)
    fuselage_mass = problem.get_val("data:loads:fuselage:airframe_mass", units="kg")
    assert fuselage_mass == pytest.approx(157.839, abs=1e-2)


def test_torsion_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(ComputeTorsionMoment()), __file__, XML_FILE)
    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(ComputeTorsionMoment(), ivc)
    torsion_moment = problem.get_val("data:loads:fuselage:torsion_moment", units="N*m")
    assert torsion_moment == pytest.approx(4003.2, abs=1e-1)
