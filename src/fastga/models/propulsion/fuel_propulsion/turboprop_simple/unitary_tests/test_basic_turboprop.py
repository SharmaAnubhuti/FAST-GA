"""
Test module for basicIC_engine.py
"""

#  This file is part of FAST : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2020  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pandas as pd

from fastoad.model_base import FlightPoint
from fastoad.constants import EngineSetting

from ..basic_turboprop_engine import BasicTurboPropEngine

THRUST_SL = np.array(
    [
        2041.6663181,
        3271.85491911,
        4502.04352012,
        5732.23212114,
        6962.42072215,
        8192.60932316,
        9422.79792418,
        10652.98652519,
        11883.1751262,
        13113.36372722,
        14343.55232823,
        15573.74092924,
        16803.92953026,
        18034.11813127,
        19264.30673228,
        20494.4953333,
        21724.68393431,
        22954.87253532,
        24185.06113634,
        25415.24973735,
        26645.43833836,
        27875.62693938,
        29105.81554039,
        30336.0041414,
        31566.19274242,
        32796.38134343,
        34026.56994444,
        35256.75854546,
        36486.94714647,
        37717.13574748,
    ]
)
THRUST_SL_LIMIT = np.array(
    [
        14301.22135189,
        16737.51971668,
        18998.99268305,
        20960.55456156,
        22907.69017886,
        24984.13912013,
        27324.29825115,
        30061.80035061,
        33395.72482003,
        37717.13574748,
    ]
)
SPEED = np.array(
    [
        5.0,
        21.72977778,
        38.45955556,
        55.18933333,
        71.91911111,
        88.64888889,
        105.37866667,
        122.10844444,
        138.83822222,
        155.568,
    ]
)
EFFICIENCY_SL = np.array(
    [
        [
            0.15049379,
            0.13928738,
            0.13844929,
            0.1317241,
            0.12331716,
            0.11481853,
            0.10684946,
            0.09948382,
            0.09279687,
            0.08666072,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
            0.08078397,
        ],
        [
            0.41144249,
            0.45856798,
            0.46083627,
            0.44618022,
            0.4257592,
            0.40402943,
            0.3826115,
            0.36215911,
            0.34288837,
            0.32518432,
            0.30890901,
            0.29335453,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
            0.27687401,
        ],
        [
            0.58212364,
            0.63528719,
            0.63962969,
            0.62578974,
            0.6051228,
            0.58216092,
            0.55877398,
            0.53585294,
            0.51355507,
            0.4920153,
            0.47213912,
            0.45362121,
            0.43595949,
            0.4176234,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
            0.39792937,
        ],
        [
            0.69227964,
            0.73791787,
            0.74122143,
            0.72904546,
            0.71126412,
            0.6911288,
            0.66988019,
            0.64846237,
            0.62747413,
            0.60672601,
            0.58628202,
            0.56734346,
            0.54954901,
            0.53241184,
            0.51522681,
            0.49471208,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
            0.48207589,
        ],
        [
            0.75851198,
            0.79709994,
            0.80038734,
            0.79053573,
            0.77536318,
            0.75853175,
            0.74097061,
            0.7223479,
            0.70365317,
            0.68528831,
            0.66702238,
            0.64855064,
            0.63141303,
            0.61528333,
            0.5995833,
            0.58404872,
            0.56673764,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
            0.54229782,
        ],
        [
            0.79481186,
            0.83049453,
            0.83495653,
            0.82787953,
            0.81583526,
            0.80154673,
            0.78702844,
            0.77196075,
            0.75587881,
            0.73980643,
            0.72387997,
            0.70811304,
            0.69174574,
            0.67640002,
            0.66206164,
            0.64795748,
            0.63404114,
            0.61958992,
            0.60249772,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
            0.58507462,
        ],
        [
            0.81178579,
            0.84794801,
            0.85488351,
            0.8508804,
            0.84183428,
            0.83043572,
            0.81792661,
            0.80558363,
            0.79258058,
            0.7787559,
            0.76489885,
            0.75109283,
            0.73742291,
            0.72313309,
            0.70934337,
            0.69648857,
            0.68396196,
            0.67155284,
            0.65907937,
            0.64561911,
            0.62963407,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
            0.61570684,
        ],
        [
            0.8178308,
            0.85680036,
            0.86611671,
            0.86512325,
            0.85891233,
            0.85008392,
            0.83985888,
            0.82908495,
            0.81844731,
            0.80713408,
            0.79519855,
            0.78316512,
            0.77112898,
            0.75920789,
            0.74687887,
            0.73443738,
            0.72269626,
            0.71149665,
            0.70041375,
            0.68936486,
            0.67817089,
            0.66612933,
            0.65207795,
            0.63447863,
            0.63447863,
            0.63447863,
            0.63447863,
            0.63447863,
            0.63447863,
            0.63447863,
        ],
        [
            0.81758754,
            0.85976695,
            0.87243214,
            0.87387207,
            0.87020003,
            0.86368737,
            0.85548956,
            0.84639896,
            0.83699256,
            0.82768293,
            0.81781833,
            0.80741836,
            0.7968835,
            0.78631365,
            0.77578204,
            0.76518331,
            0.7541193,
            0.74328656,
            0.73296865,
            0.72300374,
            0.71311025,
            0.70323627,
            0.69324748,
            0.68285507,
            0.67121942,
            0.65756455,
            0.64551131,
            0.64551131,
            0.64551131,
            0.64551131,
        ],
        [
            0.81437038,
            0.85959489,
            0.87503282,
            0.87903425,
            0.87749002,
            0.87293475,
            0.86653193,
            0.85906064,
            0.8509034,
            0.84246831,
            0.83418621,
            0.82555917,
            0.81642049,
            0.80712999,
            0.79776614,
            0.78838059,
            0.77901683,
            0.76952952,
            0.75967753,
            0.74996296,
            0.74064424,
            0.73166214,
            0.72277701,
            0.71388494,
            0.7049513,
            0.6959165,
            0.68653267,
            0.67617083,
            0.6645033,
            0.64475917,
        ],
    ]
)

THRUST_CL = np.array(
    [
        729.94115413,
        1315.83999372,
        1901.73883332,
        2487.63767291,
        3073.53651251,
        3659.4353521,
        4245.3341917,
        4831.2330313,
        5417.13187089,
        6003.03071049,
        6588.92955008,
        7174.82838968,
        7760.72722927,
        8346.62606887,
        8932.52490847,
        9518.42374806,
        10104.32258766,
        10690.22142725,
        11276.12026685,
        11862.01910644,
        12447.91794604,
        13033.81678564,
        13619.71562523,
        14205.61446483,
        14791.51330442,
        15377.41214402,
        15963.31098361,
        16549.20982321,
        17135.10866281,
        17721.0075024,
    ]
)
THRUST_CL_LIMIT = np.array(
    [
        5387.04398101,
        6398.78953786,
        7299.99657492,
        8190.58657836,
        9100.00175613,
        10148.89237916,
        11479.2621274,
        13012.1989885,
        15696.23394646,
        17721.0075024,
    ]
)
EFFICIENCY_CL = np.array(
    [
        [
            0.13561145,
            0.13981707,
            0.13470153,
            0.12401138,
            0.11289766,
            0.10279247,
            0.09381097,
            0.08591079,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
            0.07880553,
        ],
        [
            0.35329863,
            0.46158873,
            0.45296529,
            0.42741523,
            0.39886432,
            0.37123117,
            0.3457637,
            0.32255127,
            0.30192363,
            0.2825202,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
            0.26797263,
        ],
        [
            0.43032411,
            0.63897256,
            0.63237456,
            0.6067215,
            0.57632168,
            0.54578446,
            0.51655855,
            0.48889442,
            0.46319065,
            0.44006201,
            0.41812925,
            0.39427187,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
            0.38742135,
        ],
        [
            0.53527406,
            0.74101704,
            0.734811,
            0.71219003,
            0.68533465,
            0.65726758,
            0.62956215,
            0.60303706,
            0.57719734,
            0.55302116,
            0.53096355,
            0.50979485,
            0.48770208,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
            0.46342192,
        ],
        [
            0.6652604,
            0.79998108,
            0.79483729,
            0.77584741,
            0.75269753,
            0.72903619,
            0.70466021,
            0.6807121,
            0.65766318,
            0.6346759,
            0.61297546,
            0.59302159,
            0.57369429,
            0.55422192,
            0.53121625,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
            0.51989511,
        ],
        [
            0.73752023,
            0.78199064,
            0.79898026,
            0.81489033,
            0.79563679,
            0.77529604,
            0.75513478,
            0.73430537,
            0.7138148,
            0.69397642,
            0.67401987,
            0.65458398,
            0.63679986,
            0.61957956,
            0.60247449,
            0.5841639,
            0.56093671,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
            0.55480067,
        ],
        [
            0.77552962,
            0.82572129,
            0.83108587,
            0.82126188,
            0.80201662,
            0.77627037,
            0.73605615,
            0.77081373,
            0.75310761,
            0.73559919,
            0.71841605,
            0.70149367,
            0.68410934,
            0.66793269,
            0.65253845,
            0.63747706,
            0.62237917,
            0.60604006,
            0.58683098,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
            0.57323501,
        ],
        [
            0.74823786,
            0.80720301,
            0.81013331,
            0.84553911,
            0.79320867,
            0.82240967,
            0.80800236,
            0.79320152,
            0.77830692,
            0.76268316,
            0.74685013,
            0.73093776,
            0.71481292,
            0.69802033,
            0.67968704,
            0.65893944,
            0.64510583,
            0.63188374,
            0.60840541,
            0.60432959,
            0.60321117,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
            0.60213402,
        ],
        [
            0.65119602,
            0.72857167,
            0.85239223,
            0.85273752,
            0.84653459,
            0.83694912,
            0.82550375,
            0.81303135,
            0.8001563,
            0.78713138,
            0.77356471,
            0.75952233,
            0.74525171,
            0.73067522,
            0.71549745,
            0.69901368,
            0.67978556,
            0.66673659,
            0.65269828,
            0.64002706,
            0.63240778,
            0.62441112,
            0.6143611,
            0.60418027,
            0.59275519,
            0.57967158,
            0.56609295,
            0.56609295,
            0.56609295,
            0.56609295,
        ],
        [
            0.76088177,
            0.8323723,
            0.85394603,
            0.85846606,
            0.85568281,
            0.84914017,
            0.8403941,
            0.83034064,
            0.81952616,
            0.80830796,
            0.79702446,
            0.78549536,
            0.77354638,
            0.76157616,
            0.74961994,
            0.73767811,
            0.72572056,
            0.71391409,
            0.7021221,
            0.69071622,
            0.68001582,
            0.66993426,
            0.6601404,
            0.65048154,
            0.64106104,
            0.63147709,
            0.62148889,
            0.61084625,
            0.59940266,
            0.58231662,
        ],
    ]
)


def test_compute_flight_points():
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    engine = BasicTurboPropEngine(
        625600.0,
        9448.8,
        129.6,
        3.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )  # load a 4-strokes 130kW gasoline engine

    # Test with scalars
    flight_point = FlightPoint(
        mach=0.3, altitude=0.0, engine_setting=EngineSetting.CLIMB.value, thrust=480.58508079
    )  # with engine_setting as int
    engine.compute_flight_points(flight_point)
    np.testing.assert_allclose(flight_point.thrust_rate, 0.092, rtol=1e-2)
    np.testing.assert_allclose(flight_point.sfc, 1.636e-05, rtol=1e-2)

    # flight_point = FlightPoint(
    #     mach=0.0, altitude=0.0, engine_setting=EngineSetting.TAKEOFF, thrust_rate=0.8
    # )  # with engine_setting as EngineSetting
    # engine.compute_flight_points(flight_point)
    # np.testing.assert_allclose(flight_point.thrust, 3992.47453905 * 0.8, rtol=1e-2)
    # np.testing.assert_allclose(flight_point.sfc, 2.414166e-16, rtol=1e-2)

    # Test full arrays
    # 2D arrays are used, where first line is for thrust rates, and second line
    # is for thrust values.
    # As thrust rates and thrust values match, thrust rate results are 2 equal
    # lines and so are thrust value results.
    machs = [0, 0.3, 0.3, 0.4, 0.4]
    altitudes = [0, 0, 0, 10000, 20400]
    thrust_rates = [0.8, 0.5, 0.5, 0.4, 0.7]
    thrusts = [3193.97963124, 480.58508079, 480.58508079, 209.52130202, 339.32315391]
    engine_settings = [
        EngineSetting.TAKEOFF,
        EngineSetting.TAKEOFF,
        EngineSetting.CLIMB,
        EngineSetting.IDLE,
        EngineSetting.CRUISE,
    ]  # mix EngineSetting with integers
    expected_sfc = [4.645117e-16, 1.595198e-05, 1.595198e-05, 1.310423e-05, 1.789626e-05]

    flight_points = FlightPoint(
        mach=machs + machs,
        altitude=altitudes + altitudes,
        engine_setting=engine_settings + engine_settings,
        thrust_is_regulated=[False] * 5 + [True] * 5,
        thrust_rate=thrust_rates + [0.0] * 5,
        thrust=[0.0] * 5 + thrusts,
    )
    engine.compute_flight_points(flight_points)
    # np.testing.assert_allclose(flight_points.sfc, expected_sfc + expected_sfc, rtol=1e-4)
    np.testing.assert_allclose(flight_points.thrust_rate, thrust_rates + thrust_rates, rtol=1e-4)
    np.testing.assert_allclose(flight_points.thrust, thrusts + thrusts, rtol=1e-4)


def test_engine_weight():
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    _50kw_engine = BasicICEngine(
        50000.0,
        2400.0,
        81.0,
        1.0,
        4.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )
    np.testing.assert_allclose(_50kw_engine.compute_weight(), 82, atol=1)
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    _250kw_engine = BasicICEngine(
        250000.0,
        2400.0,
        81.0,
        1.0,
        4.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )
    np.testing.assert_allclose(_250kw_engine.compute_weight(), 569, atol=1)
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    _130kw_engine = BasicICEngine(
        130000.0,
        2400.0,
        81.0,
        1.0,
        4.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )
    np.testing.assert_allclose(_130kw_engine.compute_weight(), 277, atol=1)


def test_engine_dim():
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    _50kw_engine = BasicICEngine(
        50000.0,
        2400.0,
        81.0,
        1.0,
        4.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )
    np.testing.assert_allclose(
        _50kw_engine.compute_dimensions(), [0.45, 0.67, 1.20, 2.71], atol=1e-2
    )
    # BasicICEngine(max_power(W), design_altitude(m), design_speed(m/s), fuel_type, strokes_nb, prop_layout)
    _250kw_engine = BasicICEngine(
        250000.0,
        2400.0,
        81.0,
        1.0,
        4.0,
        1.0,
        SPEED,
        THRUST_SL,
        THRUST_SL_LIMIT,
        EFFICIENCY_SL,
        SPEED,
        THRUST_CL,
        THRUST_CL_LIMIT,
        EFFICIENCY_CL,
    )
    np.testing.assert_allclose(
        _250kw_engine.compute_dimensions(), [0.77, 1.15, 2.05, 7.92], atol=1e-2
    )
